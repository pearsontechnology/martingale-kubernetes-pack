---
name: Kube
pages:
  KubeDashboard:
    "$type": HeaderPage
    props:
      title: Kubernetes Dashboard
    children:
    - "$type": Panel
      props:
        title: Status
        maxHeight: 400
      children:
        "$type": Provider
        props:
          provide:
            data:
              url:
                $map: '(params.env?`/api/${params.env}/kube`:"/api/kube")+`/api/v1/componentstatuses`'
              root: items
              mapper:
                "$mapper": |-
                  props.map((comp)=>{
                              const md = comp.metadata;
                              const cnd = comp.conditions;
                              const status = cnd.length===0?'unknown':
                                  cnd.map((c)=>c.type+'='+c.status).join(', ')
                                ;
                              return {
                                name: md.name,
                                status
                              };
                            })
          Component:
            "$component": Table
    - "$type": Panel
      props:
        title: Events
        maxHeight: 400
      children:
        "$type": Provider
        props:
          provide:
            data:
              url:
                $map: '(params.env?`/api/${params.env}/kube`:"/api/kube")+`/api/v1/events`'
              root: items
              mapper:
                "$mapper": |-
                  props
                          .map((item)=>{
                              const md = item.metadata;
                              const io = item.involvedObject;
                              return {
                                type: item.type,
                                namespace: md.namespace,
                                target: io.kind,
                                reason: item.reason,
                                message: item.message,
                                source: item.source.component,
                                first: new Date(Date.parse(item.firstTimestamp)),
                                last: item.lastTimestamp
                              };
                            }).sort((a1, a2)=>a1.first.getTime()-a2.first.getTime())
          Component:
            "$component": Table
    - "$type": Panel
      props:
        title: Nodes
        maxHeight: 400
      children:
        "$type": Provider
        props:
          provide:
            data:
              url:
                $map: '(params.env?`/api/${params.env}/kube`:"/api/kube")+`/api/v1/nodes`'
              root: items
              mapper:
                "$mapper": |-
                  props.map((item)=>{
                              const md = item.metadata;
                              const status = item.status;
                              return {
                                name: md.name,
                                created: md.creationTimestamp,
                                labels: md.labels,
                                cpuCapacity: status.capacity.cpu,
                                memoryCapacity: status.capacity.memory,
                                podsCapacity: status.capacity.pods,
                                cpuAllocatable: status.allocatable.cpu,
                                memoryAllocatable: status.allocatable.memory,
                                podsAllocatable: status.allocatable.pods
                              };
                            })
          Component:
            "$component": Table
    path: "/kube/"
    sideNav: true
    caption: Kube Dashboard
    isDashboard: true
  Listing:
    "$type": HeaderPage
    props:
      title: Kubernetes Namespaces
    children:
      "$type": Panel
      children:
        "$type": Provider
        props:
          provide:
            data:
              url:
                $map: '(params.env?`/api/${params.env}/kube`:"/api/kube")+`/api/v1/namespaces`'
              root: items
              mapper:
                "$mapper": |-
                  props
                                  .map(r=>{
                                    const m = r.metadata;
                                    return {
                                      name: m.name,
                                      systemTimeCreated: new Date(Date.parse(m.creationTimestamp)).toISOString(),
                                      localTimeCreated: new Date(Date.parse(m.creationTimestamp)),
                                    };
                                  })
          Component:
            "$component": ActionTable
          props:
            actions:
            - link: "/kube/namespace/${name}/pods${extractQueryParams(['apiBase'])}"
              caption: Pods
              btnStyle: primary
              items:
              - link: "/kube/namespace/${name}/ingresses${extractQueryParams(['apiBase'])}"
                caption: Ingresses
              - link: "/kube/namespace/${name}/secrets${extractQueryParams(['apiBase'])}"
                caption: Secrets
              - link: "/kube/namespace/${name}/thirdpartyresources${extractQueryParams(['apiBase'])}"
                caption: Third Party Resources
              - link: "/kube/namespace/${name}/replicasets${extractQueryParams(['apiBase'])}"
                caption: Replicasets
              - link: "/kube/namespace/${name}/daemonsets${extractQueryParams(['apiBase'])}"
                caption: Daemonsets
              - link: "/kube/namespace/${name}/resourcequotas${extractQueryParams(['apiBase'])}"
                caption: Resource Quotas
              - link: "/kube/namespace/${name}/deployments${extractQueryParams(['apiBase'])}"
                caption: Deployments
              - link: "/kube/namespace/${name}/services${extractQueryParams(['apiBase'])}"
                caption: Services
    path: "/kube/namespaces/"
    icon: Cluster
    sideNav: true
    caption: Namespaces
  Pods:
    "$type": HeaderPage
    props:
      title:
        "$map": "`${params.name} - Pod's`"
    children:
      "$type": Panel
      children:
        "$type": Provider
        props:
          provide:
            data:
              url:
                $map: '(params.env?`/api/${params.env}/kube`:"/api/kube")+`/api/v1/namespaces/${params.name}/pods`'
              root: items
              mapper:
                "$mapper": |-
                  props.map((pod)=>{
                                const running = getObjectValue('status.containerStatuses[0].state.running', pod);
                                return {
                                  name: getObjectValue('metadata.name', pod),
                                  node: getObjectValue('spec.nodeName', pod),
                                  namespace: getObjectValue('metadata.namespace', pod),
                                  created: getObjectValue('metadata.creationTimestamp', pod),
                                  phase: getObjectValue('status.phase', pod),
                                  status: running?getObjectValue('status.phase', pod):getObjectValue('status.containerStatuses[0].state.waiting.reason', pod, 'unknown'),
                                  restartCount: getObjectValue('status.containerStatuses[0].restartCount', pod, '0'),
                                  podIp: getObjectValue('status.podIP', pod),
                                  started: getObjectValue('startedAt', running)
                                };
                              })
              refresh: 5000
          Component:
            "$component": ActionTable
          props:
            actions:
            - link:
                "$mapper": "`/kube/namespace/${params.name}/pod/${props.name}/logs${extractQueryParams(['apiBase'])}`"
              caption: Logs
              btnStyle: primary
              items:
              - link:
                  "$mapper": "`/kube/namespace/${params.name}/pod/${props.name}${extractQueryParams(['apiBase'])}`"
                caption: Details
                btnStyle: default
            - delete:
                $mapper: '(params.env?`/api/${params.env}/kube`:"/api/kube")+`/api/v1/namespaces/${params.name}/pods/${props.name}`'
              caption: Refresh
              message: Are you sure you want to refresh ${name}?
    path: "/kube/namespace/:name/pods"
  Pod:
    "$type": HeaderPage
    props:
      title:
        "$map": "`${params.name} - ${params.id} - Details`"
    children:
      "$type": Panel
      children:
        "$type": Provider
        props:
          provide:
            json:
              url:
                $map: '(params.env?`/api/${params.env}/kube`:"/api/kube")+`/api/v1/namespaces/${params.name}/pods/${params.id}`'
          Component:
            "$component": JsonView
          props:
            pretty: true
    path: "/kube/namespace/:name/pod/:id"
  Logs:
    "$type": HeaderPage
    props:
      title:
        "$map": "`${params.name} - ${params.id} - Logs`"
    children:
      "$type": Panel
      children:
        "$type": Provider
        props:
          provide:
            data:
              url:
                $map: '(params.env?`/api/${params.env}/kube`:"/api/kube")+`/api/v1/namespaces/${params.name}/pods/${params.id}/log?sinceSeconds=3600`'
              mapper:
                "$mapper": |-
                  props.split("\n").filter(l=>!!l).map((l)=>{
                                try{
                                  return JSON.parse(l);
                                }catch(e){
                                  return {message: l};
                                }
                              })
              refresh: 5000
          Component:
            "$component": Table
    path: "/kube/namespace/:name/pod/:id/logs"
  Ingresses:
    "$type": HeaderPage
    props:
      title:
        "$map": "`${params.name} - Ingresses`"
    children:
      "$type": Panel
      children:
        "$type": Provider
        props:
          provide:
            data:
              url:
                $map: '(params.env?`/api/${params.env}/kube`:"/api/kube")+`/apis/extensions/v1beta1/namespaces/${params.name}/ingresses`'
              root: items
              mapper:
                "$mapper": |-
                  props.map((pod)=>{
                    const hosts = getObjectValue('spec.rules', pod);
                    return {
                      name: getObjectValue('metadata.name', pod),
                      namespace: getObjectValue('metadata.namespace', pod),
                      created: getObjectValue('metadata.creationTimestamp', pod),
                      hosts
                    };
                  })
          Component:
            "$component": ActionTable
          props:
            actions:
            - link:
                "$mapper": "`/kube/namespace/${params.name}/ingress/${props.name}${extractQueryParams(['apiBase'])}`"
              caption: Details
              btnStyle: primary
    path: "/kube/namespace/:name/ingresses"
  Ingress:
    "$type": HeaderPage
    props:
      title:
        "$map": "`${params.namespace} - ${params.name}`"
    children:
      "$type": Panel
      props:
        inset: true
      children:
        "$type": Provider
        props:
          provide:
            json:
              url:
                $map: '(params.env?`/api/${params.env}/kube`:"/api/kube")+`/apis/extensions/v1beta1/namespaces/${params.namespace}/ingresses/${params.name}`'
          Component:
            "$component": JsonView
          props:
            pretty: true
    path: "/kube/namespace/:namespace/ingress/:name"
  Secrets:
    "$type": HeaderPage
    props:
      title:
        "$map": "`${params.namespace} - Secrets`"
    children:
      "$type": Panel
      children:
        "$type": Provider
        props:
          provide:
            data:
              url:
                $map: '(params.env?`/api/${params.env}/kube`:"/api/kube")+`/api/v1/namespaces/${params.namespace}/secrets`'
              root: items
              mapper:
                "$mapper": |-
                  props.map((pod)=>{
                    return {
                      name: getObjectValue('metadata.name', pod),
                      namespace: getObjectValue('metadata.namespace', pod),
                      created: getObjectValue('metadata.creationTimestamp', pod)
                    };
                  })
          Component:
            "$component": ActionTable
          props:
            actions:
            - link:
                "$mapper": "`/kube/namespace/${params.namespace}/secret/${props.name}${extractQueryParams(['apiBase'])}`"
              caption: Details
              btnStyle: primary
    path: "/kube/namespace/:namespace/secrets"
  Secret:
    "$type": HeaderPage
    props:
      title:
        "$map": "`${params.namespace} - ${params.name}`"
    children:
      "$type": Panel
      props:
        inset: true
      children:
        "$type": Provider
        props:
          provide:
            json:
              url:
                $map: '(params.env?`/api/${params.env}/kube`:"/api/kube")+`/api/v1/namespaces/${params.namespace}/secrets/${params.name}`'
          Component:
            "$component": JsonView
          props:
            pretty: true
    path: "/kube/namespace/:namespace/secret/:name"
  ThirdPartyResources:
    "$type": HeaderPage
    props:
      title:
        "$map": "`${params.namespace} - Third Party Resources`"
    children:
      "$type": Panel
      children:
        "$type": Provider
        props:
          provide:
            data:
              url:
                $map: '(params.env?`/api/${params.env}/kube`:"/api/kube")+`/apis/extensions/v1beta1/namespaces/${params.namespace}/thirdpartyresources`'
              root: items
              mapper:
                "$mapper": |-
                  props.map((tpr)=>{
                    const md = tpr.metadata;
                    return {
                      name: md.name,
                      namespace: md.namespace,
                      created: md.creationTimestamp,
                      labels: md.labels,
                      description: tpr.description
                    };
                  })
              refresh: 5000
          Component:
            "$component": ActionTable
          props:
            actions:
            - link:
                "$mapper": "`/kube/namespace/${params.namespace}/thirdpartyresource/${props.name}${extractQueryParams(['apiBase'])}`"
              caption: Details
              btnStyle: primary
    path: "/kube/namespace/:namespace/thirdpartyresources"
  ThirdPartyResource:
    "$type": HeaderPage
    props:
      title:
        "$map": "`${params.namespace} - ${params.name}`"
    children:
      "$type": Panel
      props:
        inset: true
      children:
        "$type": Provider
        props:
          provide:
            json:
              url:
                $map: '(params.env?`/api/${params.env}/kube`:"/api/kube")+`/apis/extensions/v1beta1/namespaces/${params.namespace}/thirdpartyresources/${params.name}`'
          Component:
            "$component": JsonView
          props:
            pretty: true
    path: "/kube/namespace/:namespace/thirdpartyresource/:name"
  Daemonsets:
    "$type": HeaderPage
    props:
      title:
        "$map": "`${params.namespace} - Daemonsets`"
    children:
      "$type": Panel
      children:
        "$type": Provider
        props:
          provide:
            data:
              url:
                $map: '(params.env?`/api/${params.env}/kube`:"/api/kube")+apis/extensions/v1beta1/namespaces/${params.namespace}/daemonsets`'
              root: items
              mapper:
                "$mapper": |-
                  props.map((ds)=>{
                    const md = ds.metadata;
                    return {
                      name: md.name,
                      namespace: md.namespace,
                      created: md.creationTimestamp,
                      labels: md.labels
                    };
                  })
          Component:
            "$component": ActionTable
          props:
            actions:
            - link:
                "$mapper": "`/kube/namespace/${params.namespace}/daemonset/${props.name}${extractQueryParams(['apiBase'])}`"
              caption: Details
              btnStyle: primary
    path: "/kube/namespace/:namespace/daemonsets"
  Daemonset:
    "$type": HeaderPage
    props:
      title:
        "$map": "`${params.namespace} - ${params.name}`"
    children:
      "$type": Panel
      props:
        inset: true
      children:
        "$type": Provider
        props:
          provide:
            json:
              url:
                $map: '(params.env?`/api/${params.env}/kube`:"/api/kube")+`/apis/extensions/v1beta1/namespaces/${params.namespace}/daemonsets/${params.name}`'
          Component:
            "$component": JsonView
          props:
            pretty: true
    path: "/kube/namespace/:namespace/daemonset/:name"
  Replicasets:
    "$type": HeaderPage
    props:
      title:
        "$map": "`${params.namespace} - Replicasets`"
    children:
      "$type": Panel
      children:
        "$type": Provider
        props:
          provide:
            data:
              url:
                $map: '(params.env?`/api/${params.env}/kube`:"/api/kube")+`/apis/extensions/v1beta1/namespaces/${params.namespace}/replicasets`'
              root: items
              mapper:
                "$mapper": |-
                  props.map((ds)=>{
                    const md = ds.metadata;
                    return {
                      name: md.name,
                      namespace: md.namespace,
                      created: md.creationTimestamp,
                      labels: md.labels
                    };
                  })
          Component:
            "$component": ActionTable
          props:
            actions:
            - link:
                "$mapper": "`/kube/namespace/${params.namespace}/replicaset/${props.name}${extractQueryParams(['apiBase'])}`"
              caption: Details
              btnStyle: primary
    path: "/kube/namespace/:namespace/replicasets"
  Replicaset:
    "$type": HeaderPage
    props:
      title:
        "$map": "`${params.namespace} - ${params.name}`"
    children:
      "$type": Panel
      props:
        inset: true
      children:
        "$type": Provider
        props:
          provide:
            json:
              url:
                $map: '(params.env?`/api/${params.env}/kube`:"/api/kube")+`/apis/extensions/v1beta1/namespaces/${params.namespace}/replicasets/${params.name}`'
          Component:
            "$component": JsonView
          props:
            pretty: true
    path: "/kube/namespace/:namespace/replicaset/:name"
  Quotas:
    "$type": HeaderPage
    props:
      title:
        "$map": "`${params.namespace} - Resource Quotas`"
    children:
      "$type": Panel
      children:
        "$type": Provider
        props:
          provide:
            data:
              url:
                $map: '(params.env?`/api/${params.env}/kube`:"/api/kube")+`/api/v1/namespaces/${params.namespace}/resourcequotas`'
              root: items
              mapper:
                "$mapper": |-
                  props.map((ds)=>{
                    const md = ds.metadata;
                    const spec = ds.spec;
                    const status = ds.status;
                    return {
                      name: md.name,
                      namespace: md.namespace,
                      created: md.creationTimestamp,
                      persistentVolumeClaimsLimit: spec.hard.persistentvolumeclaims,
                      podsLimit: spec.hard.pods,
                      replicationControllersLimit: spec.hard.replicationcontrollers,
                      secretsLimit: spec.hard.secrets,
                      servicesLimit: spec.hard.services,
                      persistentVolumeClaimsUsed: status.used.persistentvolumeclaims,
                      podsUsed: status.used.pods,
                      replicationControllersUsed: status.used.replicationcontrollers,
                      secretsUsed: status.used.secrets,
                      servicesUsed: status.used.services,
                    };
                  })
          Component:
            "$component": ActionTable
          props:
            actions:
            - link:
                "$mapper": "`/kube/namespace/${params.namespace}/resourcequotas/${props.name}${extractQueryParams(['apiBase'])}`"
              caption: Details
              btnStyle: primary
    path: "/kube/namespace/:namespace/resourcequotas"
  Quota:
    "$type": HeaderPage
    props:
      title:
        "$map": "`${params.namespace} - ${params.name}`"
    children:
      "$type": Panel
      props:
        inset: true
      children:
        "$type": Provider
        props:
          provide:
            json:
              url:
                $map: '(params.env?`/api/${params.env}/kube`:"/api/kube")+`/api/v1/namespaces/${params.namespace}/resourcequotas/${params.name}`'
          Component:
            "$component": JsonView
          props:
            pretty: true
    path: "/kube/namespace/:namespace/resourcequotas/:name"
  Deployments:
    "$type": HeaderPage
    props:
      title:
        "$map": "`${params.namespace} - Deployments`"
    children:
      "$type": Panel
      children:
        "$type": Provider
        props:
          provide:
            data:
              url:
                $map: '(params.env?`/api/${params.env}/kube`:"/api/kube")+`/apis/extensions/v1beta1/namespaces/${params.namespace}/deployments`'
              root: items
              mapper:
                "$mapper": |-
                  props.map((ds)=>{
                    const md = ds.metadata;
                    return {
                      name: md.name,
                      namespace: md.namespace,
                      created: md.creationTimestamp,
                      labels: md.labels
                    };
                  })
          Component:
            "$component": ActionTable
          props:
            actions:
            - link:
                "$mapper": "`/kube/namespace/${params.namespace}/deployment/${props.name}${extractQueryParams(['apiBase'])}`"
              caption: Details
              btnStyle: primary
            - delete:
                $mapper: '(params.env?`/api/${params.env}/kube`:"/api/kube")+`/apis/extensions/v1beta1/namespaces/${params.namespace}/deployments/${props.name}`'
              caption: Delete
              message: Are you sure you want to delete ${name}?
    path: "/kube/namespace/:namespace/deployments"
  Deployment:
    "$type": HeaderPage
    props:
      title:
        "$map": "`${params.namespace} - ${params.name}`"
    children:
      "$type": Panel
      props:
        inset: true
      children:
        "$type": Provider
        props:
          provide:
            json:
              url:
                $map: '(params.env?`/api/${params.env}/kube`:"/api/kube")+`/apis/extensions/v1beta1/namespaces/${params.namespace}/deployments/${params.name}`'
          Component:
            "$component": JsonView
          props:
            pretty: true
    path: "/kube/namespace/:namespace/deployment/:name"
  Services:
    "$type": HeaderPage
    props:
      title:
        "$map": "`${params.namespace} - Services`"
    children:
      "$type": Panel
      children:
        "$type": Provider
        props:
          provide:
            data:
              url:
                $map: '(params.env?`/api/${params.env}/kube`:"/api/kube")+`/api/v1/namespaces/${params.namespace}/services`'
              root: items
              mapper:
                "$mapper": |-
                  props.map((pod)=>{
                    return {
                      name: getObjectValue('metadata.name', pod),
                      namespace: getObjectValue('metadata.namespace', pod),
                      created: getObjectValue('metadata.creationTimestamp', pod)
                    };
                  })
          Component:
            "$component": ActionTable
          props:
            actions:
            - link:
                "$mapper": "`/kube/namespace/${params.namespace}/service/${props.name}${extractQueryParams(['apiBase'])}`"
              caption: Details
              btnStyle: primary
    path: "/kube/namespace/:namespace/services"
  Service:
    "$type": HeaderPage
    props:
      title:
        "$map": "`${params.namespace} - ${params.name}`"
    children:
      "$type": Panel
      props:
        inset: true
      children:
        "$type": Provider
        props:
          provide:
            json:
              url:
                $map: '(params.env?`/api/${params.env}/kube`:"/api/kube")+`/api/v1/namespaces/${params.namespace}/services/${params.name}`'
          Component:
            "$component": JsonView
          props:
            pretty: true
    path: "/kube/namespace/:namespace/service/:name"
